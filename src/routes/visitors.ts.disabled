import { Router } from 'express';
import { VisitorController } from '../controllers/visitorController';
import { authenticate, requireGuard, requireAdmin, requireEmployee } from '../middleware/auth';
import { validate, validateParams, validateQuery } from '../middleware/validation';
import {
  createVisitorSchema,
  updateVisitorSchema,
  approveVisitorSchema,
  rejectVisitorSchema,
  checkInVisitorSchema,
  checkOutVisitorSchema,
  visitorQuerySchema,
  mongoIdSchema,
} from '../utils/validation';

const router = Router();

/**
 * @swagger
 * components:
 *   schemas:
 *     VisitorRequest:
 *       type: object
 *       required:
 *         - firstName
 *         - lastName
 *         - phone
 *         - idNumber
 *         - hostEmployee
 *         - hostDepartment
 *         - visitPurpose
 *         - expectedDate
 *         - expectedTime
 *       properties:
 *         firstName:
 *           type: string
 *         lastName:
 *           type: string
 *         email:
 *           type: string
 *           format: email
 *         phone:
 *           type: string
 *         idNumber:
 *           type: string
 *         company:
 *           type: string
 *         vehicleNumber:
 *           type: string
 *         hostEmployee:
 *           type: string
 *         hostDepartment:
 *           type: string
 *         visitPurpose:
 *           type: string
 *           enum: [business_meeting, delivery, maintenance, interview, official_visit, personal_visit, other]
 *         expectedDate:
 *           type: string
 *           format: date
 *         expectedTime:
 *           type: string
 *           pattern: '^([01]?[0-9]|2[0-3]):[0-5][0-9]$'
 *         notes:
 *           type: string
 */

/**
 * @swagger
 * /api/visitors:
 *   get:
 *     summary: Get all visitors with filtering and pagination
 *     tags: [Visitors]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: query
 *         name: page
 *         schema:
 *           type: integer
 *           minimum: 1
 *         description: Page number
 *       - in: query
 *         name: limit
 *         schema:
 *           type: integer
 *           minimum: 1
 *           maximum: 100
 *         description: Number of items per page
 *       - in: query
 *         name: status
 *         schema:
 *           type: string
 *           enum: [pending, approved, rejected, checked_in, checked_out, expired]
 *         description: Filter by visitor status
 *       - in: query
 *         name: hostDepartment
 *         schema:
 *           type: string
 *         description: Filter by host department
 *       - in: query
 *         name: visitPurpose
 *         schema:
 *           type: string
 *         description: Filter by visit purpose
 *       - in: query
 *         name: startDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Filter by start date
 *       - in: query
 *         name: endDate
 *         schema:
 *           type: string
 *           format: date
 *         description: Filter by end date
 *       - in: query
 *         name: search
 *         schema:
 *           type: string
 *         description: Search in visitor details
 *     responses:
 *       200:
 *         description: Visitors retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Visitor'
 *                 pagination:
 *                   type: object
 *                   properties:
 *                     page:
 *                       type: integer
 *                     limit:
 *                       type: integer
 *                     total:
 *                       type: integer
 *                     totalPages:
 *                       type: integer
 *   post:
 *     summary: Register a new visitor
 *     tags: [Visitors]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/VisitorRequest'
 *     responses:
 *       201:
 *         description: Visitor registered successfully
 *       400:
 *         description: Validation error or duplicate visitor
 */
router.get('/', authenticate, requireEmployee, validateQuery(visitorQuerySchema), VisitorController.getAllVisitors);
router.post('/', authenticate, requireEmployee, validate(createVisitorSchema), VisitorController.createVisitor);

/**
 * @swagger
 * /api/visitors/{id}:
 *   get:
 *     summary: Get visitor by ID
 *     tags: [Visitors]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Visitor ID
 *     responses:
 *       200:
 *         description: Visitor retrieved successfully
 *       404:
 *         description: Visitor not found
 *   put:
 *     summary: Update visitor
 *     tags: [Visitors]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Visitor ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/VisitorRequest'
 *     responses:
 *       200:
 *         description: Visitor updated successfully
 *       400:
 *         description: Cannot update checked-in visitor
 *       404:
 *         description: Visitor not found
 *   delete:
 *     summary: Delete visitor
 *     tags: [Visitors]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Visitor ID
 *     responses:
 *       200:
 *         description: Visitor deleted successfully
 *       400:
 *         description: Cannot delete checked-in visitor
 *       404:
 *         description: Visitor not found
 */
router.get('/:id', authenticate, requireEmployee, validateParams(mongoIdSchema), VisitorController.getVisitorById);
router.put('/:id', authenticate, requireEmployee, validateParams(mongoIdSchema), validate(updateVisitorSchema), VisitorController.updateVisitor);
router.delete('/:id', authenticate, requireAdmin, validateParams(mongoIdSchema), VisitorController.deleteVisitor);

/**
 * @swagger
 * /api/visitors/{id}/approve:
 *   post:
 *     summary: Approve visitor
 *     tags: [Visitors]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Visitor ID
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               notes:
 *                 type: string
 *     responses:
 *       200:
 *         description: Visitor approved successfully
 *       400:
 *         description: Only pending visitors can be approved
 *       404:
 *         description: Visitor not found
 */
router.post('/:id/approve', authenticate, requireGuard, validateParams(mongoIdSchema), validate(approveVisitorSchema), VisitorController.approveVisitor);

/**
 * @swagger
 * /api/visitors/{id}/reject:
 *   post:
 *     summary: Reject visitor
 *     tags: [Visitors]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Visitor ID
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - reason
 *             properties:
 *               reason:
 *                 type: string
 *                 minLength: 10
 *     responses:
 *       200:
 *         description: Visitor rejected successfully
 *       400:
 *         description: Only pending visitors can be rejected
 *       404:
 *         description: Visitor not found
 */
router.post('/:id/reject', authenticate, requireGuard, validateParams(mongoIdSchema), validate(rejectVisitorSchema), VisitorController.rejectVisitor);

/**
 * @swagger
 * /api/visitors/{id}/checkin:
 *   post:
 *     summary: Check in visitor
 *     tags: [Visitors]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Visitor ID
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               location:
 *                 type: string
 *                 default: Main Gate
 *               notes:
 *                 type: string
 *     responses:
 *       200:
 *         description: Visitor checked in successfully
 *       400:
 *         description: Only approved visitors can be checked in
 *       404:
 *         description: Visitor not found
 */
router.post('/:id/checkin', authenticate, requireGuard, validateParams(mongoIdSchema), validate(checkInVisitorSchema), VisitorController.checkInVisitor);

/**
 * @swagger
 * /api/visitors/{id}/checkout:
 *   post:
 *     summary: Check out visitor
 *     tags: [Visitors]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Visitor ID
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               location:
 *                 type: string
 *                 default: Main Gate
 *               notes:
 *                 type: string
 *     responses:
 *       200:
 *         description: Visitor checked out successfully
 *       400:
 *         description: Only checked-in visitors can be checked out
 *       404:
 *         description: Visitor not found
 */
router.post('/:id/checkout', authenticate, requireGuard, validateParams(mongoIdSchema), validate(checkOutVisitorSchema), VisitorController.checkOutVisitor);

/**
 * @swagger
 * /api/visitors/{id}/qrcode:
 *   get:
 *     summary: Get visitor QR code
 *     tags: [Visitors]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: Visitor ID
 *     responses:
 *       200:
 *         description: QR code retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: object
 *                   properties:
 *                     qrCode:
 *                       type: string
 *                       description: Base64 encoded QR code image
 *                     visitor:
 *                       type: object
 *       400:
 *         description: QR code only available for approved visitors
 *       404:
 *         description: Visitor not found
 */
router.get('/:id/qrcode', authenticate, requireGuard, validateParams(mongoIdSchema), VisitorController.getVisitorQRCode);

export default router;